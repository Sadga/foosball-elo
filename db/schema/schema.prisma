datasource db {
  provider = "sqlite"
  url      = "file:../storage/db.sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts       Account[]
  sessions       Session[]
  players        Player[]
  matchesCreated Match[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model League {
  id        String @id @default(cuid())
  name      String
  maxPoints Int    @default(10)

  players Player[]
  teams   Team[]
  matches Match[]
}

model Player {
  id            String @id @default(cuid())
  userId        String
  leagueId      String
  matchesPlayed Int    @default(0)
  eloFront      Int    @default(1000)
  eloBack       Int    @default(1000)
  eloTotal      Int    @default(1000)

  user   User   @relation(fields: [userId], references: [id])
  league League @relation(fields: [leagueId], references: [id])

  teamsFront Team[] @relation("front")
  teamsBack  Team[] @relation("back")

  @@unique([userId, leagueId])
}

model Team {
  id            String @id @default(cuid())
  leagueId      String
  frontId       String
  backId        String
  matchesPlayed Int    @default(0)
  eloTotal      Int    @default(1000)

  MatchTeam1 Match[] @relation("team1")
  MatchTeam2 Match[] @relation("team2")

  front Player @relation("front", fields: [frontId], references: [id])
  back  Player @relation("back", fields: [backId], references: [id])

  league League @relation(fields: [leagueId], references: [id])
}

model Match {
  id          String   @id @default(cuid())
  leagueId    String
  team1Id     String
  team2Id     String
  score1      Int      @default(0)
  score2      Int      @default(0)
  date        DateTime @default(now())
  createdById String

  team1 Team @relation("team1", fields: [team1Id], references: [id])
  team2 Team @relation("team2", fields: [team2Id], references: [id])

  league League @relation(fields: [leagueId], references: [id])

  createdBy User @relation(fields: [createdById], references: [id])
}
